generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String
  username        String?   @unique
  email           String    @unique
  phone           String?   @unique
  password        String?
  refreshToken    String?   @db.Text
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isEmailVerified Boolean   @default(false)
  role            Role // e.g., ADMIN, AGENT, etc.

  // Each user (employee) can belong to one business.
  business   Business? @relation("BusinessEmployees", fields: [businessId], references: [id])
  businessId String? // foreign key; optional if user is not linked to any business

  accounts        Account[]
  prospects       Prospect[]      @relation("AssignedProspects")
  broadcasts      Broadcast[]     @relation("CreatedBroadcasts")
  templates       Template[]      @relation("CreatedTemplates")
  flashResponses  FlashResponse[] @relation("CreatedFlashResponses")
  ManageBroadcast Boolean         @default(true)
  manageTeam      Boolean         @default(true)
  manageCampaign  Boolean         @default(true)
  assignChat      Boolean         @default(true)

  Campaign Campaign[]
}

enum Acess {
  READ
  WRITE
}

enum Role {
  ADMIN
  AGENT
}

model Account {
  id                    String  @id @default(cuid())
  userId                String  @unique
  type                  String
  provider              String
  providerAccountId     String
  refreshToken          String? @db.Text
  accessToken           String? @db.Text
  expiresAt             Int?
  tokenType             String?
  scope                 String?
  idToken               String? @db.Text
  sessionState          String?
  refreshTokenExpiresIn Int?
  user                  User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Business {
  id           String     @id @default(cuid())
  businessName String
  createdAt    DateTime   @default(now())
  // List of employees (admins, agents, etc.) who are associated with this business.
  employees    User[]     @relation("BusinessEmployees")
  prospects    Prospect[]
  tags         Tag[]

  shopify_Token        String?
  shopify_domain       String?
  whatsapp_mobile_id   String?
  whatsapp_mobile      String? @unique
  whatsapp_token       String?
  whatsapp_buisness_id String?

  Broadcast     Broadcast[]
  Template      Template[]
  FlashResponse FlashResponse[]
  Payment       Payment[]

  StarredCustomers StarredCustomers[]

  Campaign Campaign[]
}

model Prospect {
  id          String    @id @default(cuid())
  shopify_id  String?   @unique
  name        String?
  email       String?
  image       String?
  last_Online DateTime?
  phoneNo     String    @unique
  lead        Lead      @default(LEAD)

  assignedToId String?
  assignedTo   User?   @relation("AssignedProspects", fields: [assignedToId], references: [id])

  buisnessNo String
  business   Business? @relation(fields: [buisnessNo], references: [whatsapp_mobile], onDelete: Cascade, onUpdate: Cascade)
  chats      Chat[]
  order      Order[]
  is_blocked Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Many-to-Many Relationship with Broadcast via BroadcastContact

  @@unique([buisnessNo, phoneNo])
}

model Order {
  id               String @id @default(cuid())
  shopify_id       String @unique
  customer_phoneno String

  propspect_id     String?
  propsect         Prospect?  @relation(fields: [propspect_id], references: [id])
  status           String
  amount           String
  Date             DateTime   @default(now())
  fromBroadcast    Boolean    @default(false)
  BroadCastId      String?
  BroadCast        Broadcast? @relation(fields: [BroadCastId], references: [id])
  shopify_store    String?
  order_status_url String?
  processed_at     DateTime?
  cancel_reason    String?
  cancelled_at     DateTime?
  cart_token       String?    @unique
  checkout_id      String?    @unique
  // checkout         Checkout?  @relation(fields: [checkout_id], references: [shopify_id])
  checkout_token   String?    @unique

  closed_at                         DateTime?
  confirmation_number               String?
  confirmed                         Boolean?
  contact_email                     String?
  created_at                        DateTime?
  currency                          String?
 shipping_address                  Json?

  discount_codes Json? // Array of discount codes

// e.g., "paid"
  fulfillment_status String?
  landing_site       String?
  fulfillments      Json? // Array of fullfillments

  merchant_business_entity_id String?

  name String? // Order name or identifier (e.g., "#1165")

  order_number Int?

 
  shipping_lines                             Json?

  total_weight Int?
  updated_at   DateTime?
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
}

enum Lead {
  LEAD
  LOST
  NEGOTIATION
  OTHER
}

model Tag {
  id         String    @id @default(cuid())
  title      String
  business   Business? @relation(fields: [businessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  businessId String?
}

model Chat {
  id                  String   @id @default(cuid())
  chatId              String?  @unique
  senderPhoneNo       String
  receiverPhoneNo     String
  sendDate            DateTime
  template_used       Boolean  @default(false)
  template_name       String?
  template_components Json?

  header_type  HeaderType?
  header_value String?

  body_text String?

  footer_included Boolean @default(false)

  footer_text String?
  Buttons     Json?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deleted      Boolean       @default(false)
  Status       MessageStatus @default(pending)
  failedReason String?
  Prospect     Prospect?     @relation(fields: [prospectId], references: [id])
  prospectId   String?

  isForBroadcast Boolean    @default(false)
  Broadcast      Broadcast? @relation(fields: [broadcastId], references: [id])
  broadcastId    String?
  isForRetry     Boolean    @default(false)
  retryId        String?
  retry          Retry?     @relation(fields: [retryId], references: [id])
  isForCampaign  Boolean    @default(false)

  campaignId String?

  ContactId String?

  type String

  Contacts Contacts[]
}

model StarredCustomers {
  id          String   @id @default(cuid())
  shopify_id  String
  forBuisness Business @relation(fields: [BuisnessId], references: [id])
  BuisnessId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum MessageStatus {
  pending
  sent
  delivered
  read
  failed
  skipped
}

enum HeaderType {
  IMAGE
  VIDEO
  DOCUMENT
  TEXT // Added document support
}

enum BodyType {
  image
  text
  document
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Broadcast {
  id String @id @default(cuid())

  template_name                         String
  name                                  String
  type                                  BroadCastType
  status                                broadcastStatus @default(pending)
  template_language                     String
  description                           String
  createdBy                             String?
  total_contact                         Int
  creator                               User?           @relation("CreatedBroadcasts", fields: [createdBy], references: [id])
  createdForId                          String?
  createdFor                            Business?       @relation(fields: [createdForId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt                             DateTime        @default(now())
  updatedAt                             DateTime        @updatedAt
  isScheduled                           Boolean         @default(false)
  scheduledDate                         DateTime?
  price                                 String
  Chat                                  Chat[]
  links_visit                           Int             @default(0)
  BroadCast_Contacts                    Contacts[]
  unique_order_created                  Int             @default(0)
  onlimit_exced                         Limitexced
  Order                                 Order[]
  retry_limit                           Int             @default(0)
  retry                                 Retry[]
  contacts_type                         ContactType
  segment_id                            String?
  componentData                         Json
  excelData                             Json?
  utm_campaign                          String?
  utm_medium                            String?
  utm_source                            String?
  utm_term                              Boolean         @default(false)
  utm_id                                Boolean?        @default(false)
  avoid_duplicate                       Boolean         @default(true)
  limit_marketing_message_enabled       Boolean         @default(true)
  limit_marketing_message_messagenumber Int?
  limit_marketing_message_duration      String?
  skip_inactive_contacts_enabled        Boolean         @default(true)
  skip_inactive_contacts_days           Int?
  reply_count                           Int             @default(0)
  unique_interactions                   Int             @default(0)
}

enum broadcastStatus {
  pending
  completed
  running
}

enum ContactType {
  excel
  shopify
}

model Retry {
  id          String          @id @default(cuid())
  broadcastId String
  Broadcast   Broadcast       @relation(fields: [broadcastId], references: [id])
  created_at  DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  Chat        Chat[]
  status      broadcastStatus @default(pending)
}

enum Limitexced {
  pause
  skip
}

enum BroadCastType {
  PROMOTIONAL
  TRANSACTIONAL
}

model Contacts {
  id          String    @id @default(cuid())
  phoneNo     String
  name        String?
  email       String?
  status      String?
  createdBy   String?
  BroadCastId String
  Broadcast   Broadcast @relation(fields: [BroadCastId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  chatId      String
  Chat        Chat      @relation(fields: [chatId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Template {
  id            String           @id @default(cuid())
  name          String
  languageCode  String
  category      TemplateCategory
  status        TemplateStatus
  component     Json?           // any additional data you want to store
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
   createdBy    String?
  creator      User?     @relation("CreatedTemplates", fields: [createdBy], references: [id])
  createdForId String?
  createdFor   Business? @relation(fields: [createdForId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum TemplateCategory {
  AUTHENTICATION
  MARKETING
  UTILITY
}

enum TemplateStatus {
  PENDING
  APPROVED
  REJECTED
}

model FlashResponse {
  id              String    @id @default(cuid())
  heading         String
  category        String
  message         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       String?
  creator         User?     @relation("CreatedFlashResponses", fields: [createdBy], references: [id])
  createdForId    String?
  createdFor      Business? @relation(fields: [createdForId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shareWithOthers Boolean   @default(true)
}

model Payment {
  id                String        @id @default(cuid())
  razorpayOrderId   String // Razorpay Order ID
  razorpayPaymentId String? // Razorpay Payment ID (can be null if not completed)
  razorpaySignature String? // Razorpay Signature (for validation)
  amount            Float // Payment amount
  currency          String // Currency, e.g., "INR"
  status            PaymentStatus @default(PENDING) // Status of payment
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

model Campaign {
  id   String @id @default(cuid())
  name String

  status                  CampaignStatus           @default(ACTIVE)
  type                    CampaignType
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  createdBy               String?
  creator                 User?                    @relation(fields: [createdBy], references: [id])
  createdForId            String?
  createdFor              Business?                @relation(fields: [createdForId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  CheckoutCreatedCampaign CheckoutCreatedCampaign?
  OrderCreatedCampaign    orderCreatedCampaign?
}

model CheckoutCreatedCampaign {
  id                            String               @id @default(cuid())
  campaign                      Campaign             @relation(fields: [campaignId], references: [id])
  campaignId                    String               @unique
  trigger_time                  Int
  trigger_time_unit             time_unit
  template_name                 String
  template_type                 String
  template_lang                 String
  components                    Json
  isdiscountgiven               Boolean @default(true)
  discount                      Int
  discount_type                 discount_type
  Condition_filter_match        Boolean
  new_checkout_abandonment      Boolean
  new_checkout_abandonment_type trigger_type
  new_checkout_abandonment_time Int
  new_checkout_abandonment_unit time_unit
  new_order_creation            Boolean
  new_order_creation_type       trigger_type
  new_order_creation_time       Int
  new_order_creation_unit       time_unit
  order_created                 Boolean
  order_cancelled               Boolean
  checkouts                     CheckoutOnCampaign[] // Relation to the join table
}

model Checkout {
  id          String   @id @default(cuid())
  shopify_id  String   @unique
  token       String
  cartToken   String
  email       String?
  gateway     String?
  createdAt   DateTime
  updatedAt   DateTime
  landingSite String
  // note                    String?
  // noteAttributes          Json?
  domain      String

  shippingLines        Json?
  shippingAddress      Json?
  taxesIncluded        Boolean
  totalWeight          Int
  currency             String
  completedAt          DateTime?
  phone                String?
  customerLocale       String
  lineItems            Json?
  name                 String
  abandonedCheckoutUrl String
  discountCodes        Json?
  taxLines             Json?
  presentmentCurrency  String
  sourceName           String?
  totalLineItemsPrice  String
  totalTax             String
  totalDiscounts       String
  subtotalPrice        String
  totalPrice           String
  totalDuties          String
  userId               String?
  customer             Json?
  sourceUrl            String?
  source               String?
  closedAt             DateTime?
  for_campaign         Boolean              @default(false)
  campaigns            CheckoutOnCampaign[] // Relation to the join table
  // order                Order?
  
}

// Join table to establish the many-to-many relationship
model CheckoutOnCampaign {
  checkoutId String
  campaignId String
  assignedAt DateTime @default(now())

  checkout Checkout                @relation(fields: [checkoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  campaign CheckoutCreatedCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([checkoutId, campaignId]) // Composite primary key
}

enum discount_type {
  PERCENTAGE
  AMOUNT
}

model orderCreatedCampaign {
  id                      String    @id @default(cuid())
  campaign                Campaign  @relation(fields: [campaignId], references: [id])
  campaignId              String    @unique
  template_name           String
  template_type           String
  template_lang           String
  components              Json
  trigger_time            Int
  trigger_time_unit       time_unit
  Condition_filter_match  Boolean
  new_checkout_abondnment Boolean
}

enum OrderTrigger_Type {
  IMMEDIATE
  CUSTOM
}

enum trigger_type {
  AFTER_CAMPAIGN_CREATED
  CUSTOM
}

enum time_unit {
  DAY
  HOUR
  MINUTE
}

enum CampaignType {
  ORDER_CREATED
  ORDER_UPDATED
  ORDER_CANCELLED
  CHECKOUT_CREATED
  FULFILLMENT_CREATED
  FULFILLMENT_EVENT_CREATED
  ORDER_TAG_ADDED
}

enum CampaignStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}


