generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String
  username        String?   @unique
  email           String    @unique
  phone           String?   @unique
  password        String?
  refreshToken    String?   @db.Text
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isEmailVerified Boolean   @default(false)
  role            Role // e.g., ADMIN, AGENT, etc.

  // Each user (employee) can belong to one business.
  business   Business? @relation("BusinessEmployees", fields: [businessId], references: [id])
  businessId String? // foreign key; optional if user is not linked to any business

  accounts        Account[]
  prospects       Prospect[]      @relation("AssignedProspects")
  broadcasts      Broadcast[]     @relation("CreatedBroadcasts")
  templates       Template[]      @relation("CreatedTemplates")
  flashResponses  FlashResponse[] @relation("CreatedFlashResponses")
  ManageBroadcast Boolean         @default(true)
  manageTeam      Boolean         @default(true)
  manageCampaign  Boolean         @default(true)
  assignChat      Boolean         @default(true)

  Campaign Campaign[]

  Chat Chat[]

  Tag Tag[]
}

enum Acess {
  READ
  WRITE
}

enum Role {
  ADMIN
  AGENT
}

model Account {
  id                    String  @id @default(cuid())
  userId                String  @unique
  type                  String
  provider              String
  providerAccountId     String
  refreshToken          String? @db.Text
  accessToken           String? @db.Text
  expiresAt             Int?
  tokenType             String?
  scope                 String?
  idToken               String? @db.Text
  sessionState          String?
  refreshTokenExpiresIn Int?
  user                  User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Business {
  id           String     @id @default(cuid())
  businessName String
  createdAt    DateTime   @default(now())
  // List of employees (admins, agents, etc.) who are associated with this business.
  employees    User[]     @relation("BusinessEmployees")
  prospects    Prospect[]
  tags         Tag[]

  shopify_Token        String?
  shopify_domain       String? @unique
  whatsapp_mobile_id   String?
  whatsapp_mobile      String? @unique
  whatsapp_token       String?
  whatsapp_buisness_id String?
  whatsapp_app_id      String?
  razorpay_id          String?
  razorpay_secret      String?


  Broadcast     Broadcast[]
  Template      Template[]
  FlashResponse FlashResponse[]
  Payment       Payment[]

  StarredCustomers StarredCustomers[]

  Campaign Campaign[]

  Order Order[]

  Checkout Checkout[]

  PaymentLink PaymentLink[]

  Bots Bots[]
}

model Tag {
  id         String    @id @default(cuid())
  tagName     String
  businessId String
  business   Business @relation(fields: [businessId], references: [id])
  created_at  DateTime @default(now())
  userId String
  user       User     @relation(fields: [userId], references: [id])

  ProspectTag ProspectTag[]
}



model Prospect {
  id          String    @id @default(cuid())
  shopify_id  String?   @unique
  name        String?
  email       String?
  image       String?
  last_Online DateTime?
  phoneNo     String    
  lead        Lead      @default(LEAD)

  assignedToId String?
  assignedTo   User?   @relation("AssignedProspects", fields: [assignedToId], references: [id])

  buisnessNo String
  business   Business? @relation(fields: [buisnessNo], references: [whatsapp_mobile], onDelete: Cascade, onUpdate: Cascade)
  chats      Chat[]
  order      Order[]
  is_blocked Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Many-to-Many Relationship with Broadcast via BroadcastContact
  discount discount[]

  @@unique([buisnessNo, phoneNo])
  ProspectTag ProspectTag[]
}

model ProspectTag {
  id         String   @id @default(cuid())
  prospectId String
  tagId      String
  created_at DateTime @default(now())

  prospect   Prospect @relation(fields: [prospectId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@unique([prospectId, tagId]) // Optional: prevents duplicate tag-prospect links
}

model Order {
  id               String     @id @default(cuid())
  shopify_id       String     @unique
  customer_phoneno String
  db_checkout_id   String?    @unique
  Checkout         Checkout?  @relation(fields: [db_checkout_id], references: [id])
  propspect_id     String?
  propsect         Prospect?  @relation(fields: [propspect_id], references: [id])
  status           String
  amount           String
  Date             DateTime   @default(now())
  fromBroadcast    Boolean    @default(false)
  BroadCastId      String?
  BroadCast        Broadcast? @relation(fields: [BroadCastId], references: [id])
  shopify_store    String?
  order_status_url String?
  processed_at     DateTime?
  cancel_reason    String?
  cancelled_at     DateTime?
  cart_token       String?    @unique
  checkout_id      String?    @unique

  checkout_token String? @unique

  closed_at           DateTime?
  confirmation_number String?
  confirmed           Boolean?
  contact_email       String?
  created_at          DateTime?
  currency            String?
  shipping_address    Json?
  tags                String?
  discount_codes      Json? // Array of discount codes

  // e.g., "paid"
  fulfillment_status String?
  landing_site       String?
  fulfillments       Json? // Array of fullfillments

  merchant_business_entity_id String?

  name String? // Order name or identifier (e.g., "#1165")

  order_number Int?

  shipping_lines Json?

  total_weight Int?
  updated_at   DateTime?

  OrderCampaign OrderCampaign[]

  PaymentLink PaymentLink[]

  buisnessId String?
  business   Business? @relation(fields: [buisnessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
}

enum Lead {
  LEAD
  LOST
  NEGOTIATION
  OTHER
}

enum BotType {
  WELCOME
  PRODUCT_BROWSING
  ORDER_CANCEL
  SHIPPING_CHARGES
  REPEAT_ORDER
  DISCOUNT
  ORDER_TRACK
}



model Bots {
  id                                  String   @id @default(cuid())
  type                                BotType
  discount_type                       discount_type @default(PERCENTAGE)
  buisness_id                         String
  Buisness                            Business @relation(fields: [buisness_id], references: [id])
  discount_amount                     String   @default("10")
  discount_expiry                     String   @default("7")
  discount_minimum                    String   @default("200")
  no_of_days_before_asking_discount   String   @default("7")
  is_active                           Boolean  @default(true)
  shipping_standard_cost              String   @default("150")
  shipping_threshold                  String   @default("200")
  international_shipping_cost         String   @default("200")

  @@unique([buisness_id, type]) // âœ… Enforces unique (buisness_id, type) pair
}




model Chat {
  id                  String   @id @default(cuid())
  chatId              String?  @unique
  senderPhoneNo       String
  receiverPhoneNo     String
  sendDate            DateTime
  template_used       Boolean  @default(false)
  template_name       String?
  template_components Json?
  senderId           String?
  sender             User?     @relation(fields: [senderId], references: [id])

  header_type  HeaderType?
  header_value String?

  body_text String?

  footer_included Boolean @default(false)

  footer_text String?
  Buttons     Json?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deleted      Boolean       @default(false)
  Status       MessageStatus @default(pending)
  failedReason String?
  Prospect     Prospect?     @relation(fields: [prospectId], references: [id])
  prospectId   String?

  isForBroadcast Boolean    @default(false)
  Broadcast      Broadcast? @relation(fields: [broadcastId], references: [id])
  broadcastId    String?
  isForRetry     Boolean    @default(false)
  retryId        String?
  retry          Retry?     @relation(fields: [retryId], references: [id])
  isForCampaign  Boolean    @default(false)

  campaignId String?
  campaign   Campaign? @relation(fields: [campaignId], references: [id])

  isAutomated Boolean @default(false)
  botName     String?

  ContactId String?

  type String

  Contacts Contacts[]
}

model StarredCustomers {
  id          String   @id @default(cuid())
  shopify_id  String
  forBuisness Business @relation(fields: [BuisnessId], references: [id])
  BuisnessId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum MessageStatus {
  pending
  sent
  delivered
  read
  failed
  skipped
}

enum HeaderType {
  IMAGE
  VIDEO
  DOCUMENT
  TEXT // Added document support
}

enum BodyType {
  image
  text
  document
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Broadcast {
  id String @id @default(cuid())

  template_name                         String
  name                                  String
  type                                  BroadCastType
  status                                broadcastStatus @default(pending)
  template_language                     String
  description                           String
  createdBy                             String?
  total_contact                         Int
  creator                               User?           @relation("CreatedBroadcasts", fields: [createdBy], references: [id])
  createdForId                          String?
  createdFor                            Business?       @relation(fields: [createdForId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt                             DateTime        @default(now())
  updatedAt                             DateTime        @updatedAt
  isScheduled                           Boolean         @default(false)
  scheduledDate                         DateTime?
  price                                 String
  Chat                                  Chat[]
  links_visit                           Int             @default(0)
  BroadCast_Contacts                    Contacts[]
  unique_order_created                  Int             @default(0)
  onlimit_exced                         Limitexced
  Order                                 Order[]
  retry_limit                           Int             @default(0)
  retry                                 Retry[]
  contacts_type                         ContactType
  segment_id                            String?
  componentData                         Json
  excelData                             Json?
  utm_campaign                          String?
  utm_medium                            String?
  utm_source                            String?
  utm_term                              Boolean         @default(false)
  utm_id                                Boolean?        @default(false)
  avoid_duplicate                       Boolean         @default(true)
  limit_marketing_message_enabled       Boolean         @default(true)
  limit_marketing_message_messagenumber Int?
  limit_marketing_message_duration      String?
  skip_inactive_contacts_enabled        Boolean         @default(true)
  skip_inactive_contacts_days           Int?
  reply_count                           Int             @default(0)
  unique_interactions                   Int             @default(0)
}

enum broadcastStatus {
  pending
  completed
  running
}

enum ContactType {
  excel
  shopify
}

model Retry {
  id          String          @id @default(cuid())
  broadcastId String
  Broadcast   Broadcast       @relation(fields: [broadcastId], references: [id])
  created_at  DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  Chat        Chat[]
  status      broadcastStatus @default(pending)
}

enum Limitexced {
  pause
  skip
}

enum BroadCastType {
  PROMOTIONAL
  TRANSACTIONAL
}

model Contacts {
  id          String    @id @default(cuid())
  phoneNo     String
  name        String?
  email       String?
  status      String?
  createdBy   String?
  BroadCastId String
  Broadcast   Broadcast @relation(fields: [BroadCastId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  chatId      String
  Chat        Chat      @relation(fields: [chatId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Template {
  id           String           @id @default(cuid())
  name         String
  whatsapp_id  String           @unique
  languageCode String
  category     TemplateCategory
  status       TemplateStatus
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  createdBy    String?
  creator      User?            @relation("CreatedTemplates", fields: [createdBy], references: [id])
  createdForId String?
  createdFor   Business?        @relation(fields: [createdForId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum TemplateCategory {
  AUTHENTICATION
  MARKETING
  UTILITY
}

enum TemplateStatus {
  PENDING
  APPROVED
  REJECTED
}

model FlashResponse {
  id              String    @id @default(cuid())
  heading         String
  category        String
  message         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       String?
  creator         User?     @relation("CreatedFlashResponses", fields: [createdBy], references: [id])
  createdForId    String?
  createdFor      Business? @relation(fields: [createdForId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shareWithOthers Boolean   @default(true)
}

model Payment {
  id                String        @id @default(cuid())
  razorpayOrderId   String // Razorpay Order ID
  razorpayPaymentId String? // Razorpay Payment ID (can be null if not completed)
  razorpaySignature String? // Razorpay Signature (for validation)
  amount            Float // Payment amount
  currency          String // Currency, e.g., "INR"
  status            PaymentStatus @default(PENDING) // Status of payment
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

model Campaign {
  id                              String                @id @default(cuid())
  name                            String
  trigger                         CampaignType          @default(CHECKOUT_CREATED)
  type                            String
  status                          CampaignStatus        @default(ACTIVE)
  trigger_type                    campaign_trigger_type
  trigger_time                    Json?
  template_name                   String
  template_type                   String
  template_lang                   String
  components                      Json
  is_discount_given               Boolean               @default(true)
  discount                        Int?
  coupon_code                     String?
  discount_type                   discount_type         @default(PERCENTAGE)
  filter_condition_match          Boolean
  new_checkout_abandonment_filter Boolean
  new_checkout_abandonment_type   trigger_type?
  new_checkout_abandonment_time   Json?
  new_order_creation_filter       Boolean?
  new_order_creation_type         trigger_type
  new_order_creation_time         Json?
  related_order_created           Boolean               @default(false)
  related_order_fulfilled         Boolean               @default(false)
  related_order_cancelled         Boolean               @default(false)
  checkouts                       CheckoutOnCampaign[]
  filters                         Filter?
  User                            User?                 @relation(fields: [userId], references: [id])
  userId                          String?
  Business                        Business?             @relation(fields: [businessId], references: [id])
  businessId                      String?
  Chat                            Chat[]
  createdAt                        DateTime             @default(now())
  


  OrderCampaign OrderCampaign[]

  PaymentLink PaymentLink[]
}

model Filter {
  id                                       String             @id @default(cuid())
  campaign_id                              String             @unique
  campaign                                 Campaign           @relation(fields: [campaign_id], references: [id])
  is_order_tag_filter_enabled              Boolean            @default(false)
  order_tag_filter_all                     String[]
  order_tag_filter_any                     String[]
  order_tag_filter_none                    String[]
  is_product_tag_filter_enabled            Boolean            @default(false)
  product_tag_filter_all                   String[]
  product_tag_filter_any                   String[]
  product_tag_filter_none                  String[]
  is_customer_tag_filter_enabled           Boolean            @default(false)
  customer_tag_filter_all                  String[]
  customer_tag_filter_any                  String[]
  customer_tag_filter_none                 String[]
  is_discount_code_filter_enabled          Boolean            @default(false)
  discount_code_filter_any                 String[]
  discount_code_filter_none                String[]
  is_payment_gateway_filter_enabled        Boolean            @default(false)
  payment_gateway_filter_any               String[]
  payment_gateway_filter_none              String[]
  is_payment_option_filter_enabled         Boolean            @default(false)
  payment_options_type                     PaymentOptionType?
  is_send_to_unsub_customer_filter_enabled Boolean            @default(false)
  send_to_unsub_customer                   Boolean?
  is_order_amount_filter_enabled           Boolean            @default(false)
  order_amount_filter_greater_or_equal     Int?
  order_amount_filter_less_or_equal        Int?
  order_amount_min                         Int?
  order_amount_max                         Int?
  is_discount_amount_filter_enabled        Boolean            @default(false)
  discount_amount_filter_greater_or_equal  Int?
  discount_amount_filter_less_or_equal     Int?
  discount_amount_min                      Int?
  discount_amount_max                      Int?
  is_order_delivery_filter_enabled         Boolean            @default(false)
  is_order_count_filter_enabled            Boolean            @default(false)
  order_count_greater_or_equal             Int?
  order_count_less_or_equal                Int?
  order_count_min                          Int?
  order_count_max                          Int?
  order_method                             OrderMethod?
}

model Checkout {
  id                   String               @id @default(cuid())
  shopify_id           String               @unique
  token                String
  cartToken            String
  email                String?
  gateway              String?
  createdAt            DateTime
  updatedAt            DateTime
  landingSite          String
  note                 String?
  noteAttributes       Json?
  domain               String
  currency             String
  completedAt          DateTime?
  phone                String?
  customerLocale       String?
  lineItems            Json?
  name                 String?
  abandonedCheckoutUrl String?
  discountCodes        Json?
  taxLines             Json?
  presentmentCurrency  String?
  sourceName           String?
  totalLineItemsPrice  String?
  totalTax             String?
  totalDiscounts       String
  subtotalPrice        String
  totalPrice           String
  totalDuties          String
  customer             Json?
  source               String?
  closedAt             DateTime?
  for_campaign         Boolean              @default(false)
  shipping_address     Json?
  billingAddress       Json?
  processedAt          DateTime?
  campaigns            CheckoutOnCampaign[]
  Order                Order?
  businessId           String?
  business             Business?            @relation(fields: [businessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CheckoutOnCampaign {
  checkoutId String
  campaignId String
  assignedAt DateTime @default(now())
  checkout   Checkout @relation(fields: [checkoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([checkoutId, campaignId])
}

model OrderCampaign {
  orderId    String
  campaignId String
  assignedAt DateTime @default(now())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([orderId, campaignId])
}

model PaymentLink {
  id               String    @id @default(cuid()) // Unique identifier for the payment link record
  razorpay_link_id String    @unique // Unique identifier provided by Razorpay for the payment link
  order_id         String?
  order            Order?    @relation(fields: [order_id], references: [id], onDelete: Cascade) // Optional: Associated order ID from your system
  amount           String // Amount to be paid, in the smallest currency unit (e.g., paise for INR)
  currency         String // Currency code (e.g., 'INR')
  description      String? // Optional: Description of the payment purpose
  customer_name    String? // Optional: Customer's name                     // Optional: Customer's email address
  customer_phone   String? // Optional: Customer's contact number
  status           String // Status of the payment link (e.g., 'created', 'paid', 'expired')
  short_url        String // Shortened URL for the payment link provided by Razorpay
  expire_by        Int? // Optional: Expiration time as Unix timestamp
  created_at       DateTime  @default(now()) // Timestamp when the record is created
  updated_at       DateTime  @updatedAt
  campaign_id      String?
  businessId           String?
  business             Business?            @relation(fields: [businessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  campaign         Campaign? @relation(fields: [campaign_id], references: [id], onDelete: Cascade) // Timestamp when the record is last updated
}

enum trigger_type {
  AFTER_EVENT
  CUSTOM
}

enum discount_type {
  PERCENTAGE
  AMOUNT
}

enum campaign_trigger_type {
  AFTER_CAMPAIGN_CREATED
  CUSTOM
}

enum CampaignType {
  ORDER_CREATED
  ORDER_UPDATED
  ORDER_CANCELLED
  CHECKOUT_CREATED
  FULFILLMENT_CREATED
  FULFILLMENT_EVENT_CREATED
  ORDER_TAG_ADDED
}

enum CampaignStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum OrderMethod {
  confirmed
  label_printed
  label_purchases
  ready_for_pickup
  picked_up
  in_transit
  out_for_delivery
  attemped_delivery
  failed_delivery
  delivered
}

enum PaymentOptionType {
  PAID
  UNPAID
}

enum time_unit {
  DAY
  HOUR
  MINUTE
}

model Fulfillment {
  id              String   @id @default(cuid()) // Local DB ID
  shopifyId       String   @unique // Shopify Fulfillment ID
  orderId         String // Shopify Order ID
  trackingNumber  String? // Tracking number
  trackingCompany String? // e.g., "Bluedart"
  trackingUrl     String? // Link to track shipment
  status          String // "pending", "success", etc.
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model discount {
  id         String        @id @default(cuid()) // Local DB ID
  // Shopify Discount ID
  title      String // e.g., "20% off all items"\
  amount     Float // Amount off (negative for a discount)
  type       discount_type // "PERCENTAGE" or "AMOUNT"
  code       String
  usageLimit Int?

  createdAt      DateTime @default(now())
  prospect_id String
  prospect       Prospect @relation(fields: [prospect_id], references: [id]) // Optional limit for the discount code
}
