generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id              String     @id @default(cuid())
  name            String
  username        String?    @unique
  email           String     @unique
  phone           String?    @unique
  password        String?
  refreshToken    String?    @db.Text
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  isEmailVerified Boolean    @default(false)
  role            Role       @default(USER) // Role field added
  businesses      Business[] @relation("createdBusinesses")
  accounts        Account[] // Keep this if you have OAuth or linked accounts.

  // Relations for other models
  prospects      Prospect[]      @relation("AssignedProspects") // User can be assigned to Prospects
  broadcasts     Broadcast[]     @relation("CreatedBroadcasts")
  templates      Template[]      @relation("CreatedTemplates")
  flashResponses FlashResponse[] @relation("CreatedFlashResponses")

  Business Business[] @relation("BusinessEmployees")
}

enum Role {
  USER
  ADMIN
  AGENT
}

model Account {
  id                    String  @id @default(cuid())
  userId                String  @unique
  type                  String
  provider              String
  providerAccountId     String
  refreshToken          String? @db.Text
  accessToken           String? @db.Text
  expiresAt             Int?
  tokenType             String?
  scope                 String?
  idToken               String? @db.Text
  sessionState          String?
  refreshTokenExpiresIn Int?
  user                  User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Business {
  id           String     @id @default(cuid())
  businessName String
  createdBy    String
  creator      User       @relation("createdBusinesses", fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime   @default(now())
  employees    User[]     @relation("BusinessEmployees") // Users as employees
  prospects    Prospect[]
  tags         Tag[]

  shopifyApi String?

  Broadcast     Broadcast[]
  Template      Template[]
  FlashResponse FlashResponse[]
  Payment       Payment[]
}

model Prospect {
  id           String    @id @default(cuid())
  shopify_id   String?   @unique
  name         String?
  email        String?
  image        String?
  phoneNo      String
  lead         Lead      @default(LEAD)
  tags         Tag[]
  assignedToId String?
  assignedTo   User?     @relation("AssignedProspects", fields: [assignedToId], references: [id])
  business     Business? @relation(fields: [businessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  businessId   String?
  buisnessNo   String
  chats        Chat[]
  order        Order[]
  is_blocked   Boolean   @default(false)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  // Many-to-Many Relationship with Broadcast via BroadcastContact

  @@unique([buisnessNo, phoneNo])
}

model Order {
  id                  String     @id @default(cuid())
  shopify_id          String     @unique
  prospect_shopify_id String?
  prospect            Prospect?  @relation(fields: [prospect_shopify_id], references: [shopify_id])
  status              Status     @default(PENDING)
  amount              String
  Date                DateTime   @default(now())
  fromBroadcast       Boolean    @default(false)
  BroadCastId         String?
  BroadCast           Broadcast? @relation(fields: [BroadCastId], references: [id])
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
}

enum Lead {
  LEAD
  LOST
  NEGOTIATION
  OTHER
}

model Tag {
  id         String     @id @default(cuid())
  title      String
  business   Business?  @relation(fields: [businessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  businessId String?
  prospects  Prospect[]
}

model Chat {
  id              String      @id @default(cuid())
  chatId          String      @unique
  senderPhoneNo   String
  receiverPhoneNo String
  sendDate        DateTime
  template_used   Boolean     @default(false)
  template_name   String?
  header_type     HeaderType?
  header_value    String?
  // body_type          BodyType    @default(text)
  // body_attachmentUrl String[]

  body_text String?

  footer_included Boolean  @default(false)
  // footer_type     String?
  // footer_url      String?
  footer_text     String?
  Buttons         String[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deleted      Boolean       @default(false)
  Status       MessageStatus @default(pending)
  failedReason String?
  Prospect     Prospect?     @relation(fields: [prospectId], references: [id])
  prospectId   String?

  isForBroadcast Boolean    @default(false)
  Broadcast      Broadcast? @relation(fields: [broadcastId], references: [id])
  broadcastId    String?
  ContactId      String?

  type String

  Contacts Contacts[]
}

enum MessageStatus {
  pending
  sent
  delivered
  read
  failed
}

enum HeaderType {
  IMAGE
  VIDEO
  DOCUMENT
  TEXT // Added document support
}

enum BodyType {
  image
  text
  document
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Broadcast {
  id       String @id @default(cuid())
  template String
  type     String
  status   String

  createdBy          String?
  creator            User?      @relation("CreatedBroadcasts", fields: [createdBy], references: [id])
  createdForId       String?
  createdFor         Business?  @relation(fields: [createdForId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  isScheduled        Boolean    @default(false)
  scheduledDate      DateTime?
  utm_params         String?
  utm_campaign       String?
  price              String
  is_utm_id_embeded  Boolean    @default(false)
  utm_source         String?
  utm_term           String?
  Chat               Chat[]
  links_visit        Int        @default(0)
  BroadCast_Contacts Contacts[]
  order_created      Int        @default(0)

  Order Order[]
}

model Contacts {
  id          String    @id @default(cuid())
  phoneNo     String
  name        String?
  email       String?
  status      String?
  createdBy   String?
  BroadCastId String
  Broadcast   Broadcast @relation(fields: [BroadCastId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  chatId      String
  Chat        Chat      @relation(fields: [chatId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Template {
  id           String    @id @default(cuid())
  message      String
  name         String
  status       String
  type         String
  createdBy    String?
  creator      User?     @relation("CreatedTemplates", fields: [createdBy], references: [id])
  createdForId String?
  createdFor   Business? @relation(fields: [createdForId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model FlashResponse {
  id           String    @id @default(cuid())
  short        String
  message      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdBy    String?
  creator      User?     @relation("CreatedFlashResponses", fields: [createdBy], references: [id])
  createdForId String?
  createdFor   Business? @relation(fields: [createdForId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isPrivate    Boolean   @default(false)
}

model Payment {
  id                String        @id @default(cuid())
  razorpayOrderId   String // Razorpay Order ID
  razorpayPaymentId String? // Razorpay Payment ID (can be null if not completed)
  razorpaySignature String? // Razorpay Signature (for validation)
  amount            Float // Payment amount
  currency          String // Currency, e.g., "INR"
  status            PaymentStatus @default(PENDING) // Status of payment
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}
