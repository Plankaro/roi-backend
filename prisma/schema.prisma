generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String
  username        String?   @unique
  email           String    @unique
  phone           String?   @unique
  password        String?
  refreshToken    String?   @db.Text
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isEmailVerified Boolean   @default(false)
  role            Role // e.g., ADMIN, AGENT, etc.

  // Each user (employee) can belong to one business.
  business   Business? @relation("BusinessEmployees", fields: [businessId], references: [id])
  businessId String? // foreign key; optional if user is not linked to any business

  accounts       Account[]
  prospects      Prospect[]      @relation("AssignedProspects")
  broadcasts     Broadcast[]     @relation("CreatedBroadcasts")
  templates      Template[]      @relation("CreatedTemplates")
  flashResponses FlashResponse[] @relation("CreatedFlashResponses")
  TeamManagement  Acess
  BroadcastManageMent Acess
  
  
}

enum Acess {
  READ
  WRITE
 
}

enum Role {
  ADMIN
  AGENT
}

model Account {
  id                    String  @id @default(cuid())
  userId                String  @unique
  type                  String
  provider              String
  providerAccountId     String
  refreshToken          String? @db.Text
  accessToken           String? @db.Text
  expiresAt             Int?
  tokenType             String?
  scope                 String?
  idToken               String? @db.Text
  sessionState          String?
  refreshTokenExpiresIn Int?
  user                  User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Business {
  id           String     @id @default(cuid())
  businessName String
  createdAt    DateTime   @default(now())
  // List of employees (admins, agents, etc.) who are associated with this business.
  employees    User[]     @relation("BusinessEmployees")
  prospects    Prospect[]
  tags         Tag[]

  shopify_Token        String?
  shopify_domain       String?
  whatsapp_mobile_id   String?
  whatsapp_mobile      String? @unique
  whatsapp_token       String?
  whatsapp_buisness_id String?

  Broadcast     Broadcast[]
  Template      Template[]
  FlashResponse FlashResponse[]
  Payment       Payment[]
}

model Prospect {
  id          String    @id @default(cuid())
  shopify_id  String?   @unique
  name        String?
  email       String?
  image       String?
  last_Online DateTime?
  phoneNo     String    @unique
  lead        Lead      @default(LEAD)

  assignedToId String?
  assignedTo   User?   @relation("AssignedProspects", fields: [assignedToId], references: [id])

  buisnessNo String
  business   Business? @relation(fields: [buisnessNo], references: [whatsapp_mobile], onDelete: Cascade, onUpdate: Cascade)
  chats      Chat[]
  order      Order[]
  is_blocked Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Many-to-Many Relationship with Broadcast via BroadcastContact

  @@unique([buisnessNo, phoneNo])
}

model Order {
  id               String     @id @default(cuid())
  shopify_id       String     @unique
  customer_phoneno String
  propspect_id     String
  propsect         Prospect   @relation(fields: [propspect_id], references: [id])
  status           String
  amount           String
  Date             DateTime   @default(now())
  fromBroadcast    Boolean    @default(false)
  BroadCastId      String?
  BroadCast        Broadcast? @relation(fields: [BroadCastId], references: [id])
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
}

enum Lead {
  LEAD
  LOST
  NEGOTIATION
  OTHER
}

model Tag {
  id         String    @id @default(cuid())
  title      String
  business   Business? @relation(fields: [businessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  businessId String?
}

model Chat {
  id                  String   @id @default(cuid())
  chatId              String?  @unique
  senderPhoneNo       String
  receiverPhoneNo     String
  sendDate            DateTime
  template_used       Boolean  @default(false)
  template_name       String?
  template_components Json?

  header_type  HeaderType?
  header_value String?

  body_text String?

  footer_included Boolean @default(false)

  footer_text String?
  Buttons     Json?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deleted      Boolean       @default(false)
  Status       MessageStatus @default(pending)
  failedReason String?
  Prospect     Prospect?     @relation(fields: [prospectId], references: [id])
  prospectId   String?

  isForBroadcast Boolean    @default(false)
  Broadcast      Broadcast? @relation(fields: [broadcastId], references: [id])
  broadcastId    String?
  isForRetry     Boolean    @default(false)
  retryId        String?
  retry          Retry?     @relation(fields: [retryId], references: [id])

  ContactId String?

  type String

  Contacts Contacts[]
}


model StarredCustomers {
  id          String    @id @default(cuid())
  shopify_id  String


  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum MessageStatus {
  pending
  sent
  delivered
  read
  failed
  skipped
}

enum HeaderType {
  IMAGE
  VIDEO
  DOCUMENT
  TEXT // Added document support
}

enum BodyType {
  image
  text
  document
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Broadcast {
  id String @id @default(cuid())

  template_name                         String
  name                                  String
  type                                  BroadCastType
  status                                broadcastStatus @default(pending)
  template_language                     String
  description                           String
  createdBy                             String?
  total_contact                         Int
  creator                               User?           @relation("CreatedBroadcasts", fields: [createdBy], references: [id])
  createdForId                          String?
  createdFor                            Business?       @relation(fields: [createdForId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt                             DateTime        @default(now())
  updatedAt                             DateTime        @updatedAt
  isScheduled                           Boolean         @default(false)
  scheduledDate                         DateTime?
  price                                 String
  Chat                                  Chat[]
  links_visit                           Int             @default(0)
  BroadCast_Contacts                    Contacts[]
  unique_order_created                         Int             @default(0)
  onlimit_exced                         Limitexced
  Order                                 Order[]
  retry_limit                           Int             @default(0)
  retry                                 Retry[]
  contacts_type                         ContactType
  segment_id                            String?
  componentData                         Json
  excelData                             Json?
  utm_campaign                          String?
  utm_medium                            String?
  utm_source                            String?
  utm_term                              Boolean         @default(false)
  utm_id                                Boolean?        @default(false)
  avoid_duplicate                       Boolean         @default(true)
  limit_marketing_message_enabled       Boolean         @default(true)
  limit_marketing_message_messagenumber Int?
  limit_marketing_message_duration      String?
  skip_inactive_contacts_enabled        Boolean         @default(true)
  skip_inactive_contacts_days           Int?
  reply_count                                 Int @default(0)
  unique_interactions                         Int @default(0)
}

enum broadcastStatus {
  pending
  completed
  running
}

enum ContactType {
  excel
  shopify
}

model Retry {
  id          String          @id @default(cuid())
  broadcastId String
  Broadcast   Broadcast       @relation(fields: [broadcastId], references: [id])
  created_at  DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  Chat        Chat[]
  status      broadcastStatus @default(pending)
}

enum Limitexced {
  pause
  skip
}

enum BroadCastType {
  PROMOTIONAL
  TRANSACTIONAL
}

model Contacts {
  id          String    @id @default(cuid())
  phoneNo     String
  name        String?
  email       String?
  status      String?
  createdBy   String?
  BroadCastId String
  Broadcast   Broadcast @relation(fields: [BroadCastId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  chatId      String
  Chat        Chat      @relation(fields: [chatId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Template {
  id           String    @id @default(cuid())
  message      String
  name         String
  status       String
  type         String
  createdBy    String?
  creator      User?     @relation("CreatedTemplates", fields: [createdBy], references: [id])
  createdForId String?
  createdFor   Business? @relation(fields: [createdForId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model FlashResponse {
  id           String    @id @default(cuid())
  short        String
  message      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdBy    String?
  creator      User?     @relation("CreatedFlashResponses", fields: [createdBy], references: [id])
  createdForId String?
  createdFor   Business? @relation(fields: [createdForId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isPrivate    Boolean   @default(false)
}

model Payment {
  id                String        @id @default(cuid())
  razorpayOrderId   String // Razorpay Order ID
  razorpayPaymentId String? // Razorpay Payment ID (can be null if not completed)
  razorpaySignature String? // Razorpay Signature (for validation)
  amount            Float // Payment amount
  currency          String // Currency, e.g., "INR"
  status            PaymentStatus @default(PENDING) // Status of payment
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}
