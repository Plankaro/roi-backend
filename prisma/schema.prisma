generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id              String     @id @default(cuid())
  name            String
  username        String?     @unique
  email           String      @unique
  phone           String      @unique
  password        String?
  refreshToken    String?     @db.Text
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  isEmailVerified Boolean     @default(false)
  businesses      Business[]  @relation("createdBusinesses") 
  employees       Employee[]

  accounts        Account[]   // Keep this if you have OAuth or linked accounts.
}

model Account {
  id                    String   @id @default(cuid())
  userId                String   @unique
  type                  String
  provider              String
  providerAccountId     String
  refreshToken          String?  @db.Text
  accessToken           String?  @db.Text
  expiresAt             Int?
  tokenType             String?
  scope                 String?
  idToken               String?  @db.Text
  sessionState          String?
  refreshTokenExpiresIn Int?
  user                  User?    @relation(fields: [userId], references: [id])

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Business {
  id          String       @id @default(cuid())
  businessName String
  createdBy   String
  creator     User         @relation("createdBusinesses", fields: [createdBy], references: [id],onDelete: Cascade, onUpdate:Cascade)
  createdAt   DateTime     @default(now())
  employees   Employee[]
  prospects   Prospect[]
  tags        Tag[]
  chats       Chat[]
  shopifyApi  String?

  Broadcast Broadcast[]

  Template Template[]

  FlashResponse FlashResponse[]

  Payment Payment[]
}

model Employee {
  id           String       @id @default(cuid())
  business     Business     @relation(fields: [businessId], references: [id],onUpdate: Cascade, onDelete: Cascade)
  businessId   String
  user         User         @relation(fields: [userId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  userId       String
  employeeType EmployeeType
  broadcast    Broadcast[]
  joinedDate   DateTime     @default(now())
  prospects    Prospect[]
  Template Template[]
  @@index([businessId])
  
  FlashResponse FlashResponse[]
}

enum EmployeeType {
  ADMIN
  AGENTS
}

model Prospect {
  id           String       @id @default(cuid())
  name         String
  email        String
  phoneNo      String?
  lead         Lead
  tags         Tag[]
  assignedToId String?
  assignedTo   Employee?     @relation(fields: [assignedToId], references: [id])
  business     Business      @relation(fields: [businessId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  businessId   String
  chats        Chat[]
  orders       Order[]
 
}

enum Lead {
  LEAD
  LOST
  NEGOTIATION
  OTHER
}

model Tag {
  id          String       @id @default(cuid())
  title       String
  business    Business?    @relation(fields: [businessId], references: [id],onDelete: Cascade, onUpdate:Cascade)
  businessId  String?
  prospects   Prospect[]
}

model Chat {
  id          String       @id @default(cuid())
  chatId      String
  receiverId  String
  businessId  String
  business    Business     @relation(fields: [businessId], references: [id],onDelete: Cascade,onUpdate: Cascade)
  receiver    Prospect     @relation(fields: [receiverId], references: [id])
  sendDate    DateTime
  message    Message[]
}

model Message {
  id          String       @id @default(cuid())
  chatId      String
  chat        Chat @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Order {
  id               String      @id @default(cuid())
  shopifyOrderId   String
  orderedFor       Prospect     @relation(fields: [orderedForId], references: [id])
  orderedForId     String
  orderGeneratedBy String
  price            Float
  shopifyProductId String
  quantity         Int
  isConfirmed      Boolean      @default(false)
  status           OrderStatus
  createdAt        DateTime
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Broadcast {
  id           String       @id @default(cuid())
  template     String
  type         String
  starters     String
  createdBy    Employee      @relation(fields: [createdById], references: [id])
  createdForId String
  CreatedFor    Business  @relation(fields: [createdForId], references: [id],onDelete: Cascade,onUpdate: Cascade)
  createdById  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isScheduled  Boolean       @default(false)
  scheduledDate DateTime?
}

model Template {
  id          String       @id @default(cuid())
  message     String
  status      String
  type        String
  createdBy   Employee @relation(fields: [createdById],references: [id])
  CreatedFor    Business  @relation(fields: [createdForId], references: [id],onDelete: Cascade,onUpdate: Cascade)
  createdForId  String
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model FlashResponse {
  id          String       @id @default(cuid())
  short       String
  message     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
    createdBy    Employee      @relation(fields: [createdById], references: [id])
  createdForId String
  CreatedFor    Business  @relation(fields: [createdForId], references: [id],onDelete: Cascade,onUpdate: Cascade)
  createdById  String  
}


model Payment {
  id               String       @id @default(cuid())
  razorpayOrderId  String       // Razorpay Order ID
  razorpayPaymentId String?     // Razorpay Payment ID (can be null if not completed)
  razorpaySignature String?     // Razorpay Signature (for validation)
  amount           Float        // Payment amount
  currency         String       // Currency, e.g., "INR"
  status           PaymentStatus @default(PENDING) // Status of payment
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  businessId       String
  business         Business     @relation(fields: [businessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}
